// Copyright 2016 Proyectos y Sistemas de Mantenimiento SL (eProsima).
//
// Licensed under the Apache License, Version 2.0 (the "License");
// you may not use this file except in compliance with the License.
// You may obtain a copy of the License at
//
//     http://www.apache.org/licenses/LICENSE-2.0
//
// Unless required by applicable law or agreed to in writing, software
// distributed under the License is distributed on an "AS IS" BASIS,
// WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
// See the License for the specific language governing permissions and
// limitations under the License.

/*!
 * @file Pose.h
 * This header file contains the declaration of the described types in the IDL file.
 *
 * This file was generated by the tool gen.
 */

#ifndef _POSE_H_
#define _POSE_H_

#include "EulerAngleZYX.h"
#include "std_msgs/msgs/Header.h"
#include "Position.h"
#include "Quaternion.h"

#include <stdint.h>
#include <array>
#include <string>
#include <vector>
#include <map>
#include <bitset>

#if defined(_WIN32)
#if defined(EPROSIMA_USER_DLL_EXPORT)
#define eProsima_user_DllExport __declspec( dllexport )
#else
#define eProsima_user_DllExport
#endif  // EPROSIMA_USER_DLL_EXPORT
#else
#define eProsima_user_DllExport
#endif  // _WIN32

#if defined(_WIN32)
#if defined(EPROSIMA_USER_DLL_EXPORT)
#if defined(Pose_SOURCE)
#define Pose_DllAPI __declspec( dllexport )
#else
#define Pose_DllAPI __declspec( dllimport )
#endif // Pose_SOURCE
#else
#define Pose_DllAPI
#endif  // EPROSIMA_USER_DLL_EXPORT
#else
#define Pose_DllAPI
#endif // _WIN32

namespace eprosima {
namespace fastcdr {
class Cdr;
} // namespace fastcdr
} // namespace eprosima


/*!
 * @brief This class represents the structure Pose defined by the user in the IDL file.
 * @ingroup POSE
 */
class Pose
{
public:

    /*!
     * @brief Default constructor.
     */
    eProsima_user_DllExport Pose();

    /*!
     * @brief Default destructor.
     */
    eProsima_user_DllExport ~Pose();

    /*!
     * @brief Copy constructor.
     * @param x Reference to the object Pose that will be copied.
     */
    eProsima_user_DllExport Pose(
            const Pose& x);

    /*!
     * @brief Move constructor.
     * @param x Reference to the object Pose that will be copied.
     */
    eProsima_user_DllExport Pose(
            Pose&& x);

    /*!
     * @brief Copy assignment.
     * @param x Reference to the object Pose that will be copied.
     */
    eProsima_user_DllExport Pose& operator =(
            const Pose& x);

    /*!
     * @brief Move assignment.
     * @param x Reference to the object Pose that will be copied.
     */
    eProsima_user_DllExport Pose& operator =(
            Pose&& x);

    /*!
     * @brief This function copies the value in member header
     * @param _header New value to be copied in member header
     */
    eProsima_user_DllExport void header(
            const Header& _header);

    /*!
     * @brief This function moves the value in member header
     * @param _header New value to be moved in member header
     */
    eProsima_user_DllExport void header(
            Header&& _header);

    /*!
     * @brief This function returns a constant reference to member header
     * @return Constant reference to member header
     */
    eProsima_user_DllExport const Header& header() const;

    /*!
     * @brief This function returns a reference to member header
     * @return Reference to member header
     */
    eProsima_user_DllExport Header& header();
    /*!
     * @brief This function copies the value in member position
     * @param _position New value to be copied in member position
     */
    eProsima_user_DllExport void position(
            const Position& _position);

    /*!
     * @brief This function moves the value in member position
     * @param _position New value to be moved in member position
     */
    eProsima_user_DllExport void position(
            Position&& _position);

    /*!
     * @brief This function returns a constant reference to member position
     * @return Constant reference to member position
     */
    eProsima_user_DllExport const Position& position() const;

    /*!
     * @brief This function returns a reference to member position
     * @return Reference to member position
     */
    eProsima_user_DllExport Position& position();
    /*!
     * @brief This function copies the value in member orientation_euler
     * @param _orientation_euler New value to be copied in member orientation_euler
     */
    eProsima_user_DllExport void orientation_euler(
            const EulerAngleZYZ& _orientation_euler);

    /*!
     * @brief This function moves the value in member orientation_euler
     * @param _orientation_euler New value to be moved in member orientation_euler
     */
    eProsima_user_DllExport void orientation_euler(
            EulerAngleZYZ&& _orientation_euler);

    /*!
     * @brief This function returns a constant reference to member orientation_euler
     * @return Constant reference to member orientation_euler
     */
    eProsima_user_DllExport const EulerAngleZYZ& orientation_euler() const;

    /*!
     * @brief This function returns a reference to member orientation_euler
     * @return Reference to member orientation_euler
     */
    eProsima_user_DllExport EulerAngleZYZ& orientation_euler();
    /*!
     * @brief This function copies the value in member orientation_quat
     * @param _orientation_quat New value to be copied in member orientation_quat
     */
    eProsima_user_DllExport void orientation_quat(
            const Quaternion& _orientation_quat);

    /*!
     * @brief This function moves the value in member orientation_quat
     * @param _orientation_quat New value to be moved in member orientation_quat
     */
    eProsima_user_DllExport void orientation_quat(
            Quaternion&& _orientation_quat);

    /*!
     * @brief This function returns a constant reference to member orientation_quat
     * @return Constant reference to member orientation_quat
     */
    eProsima_user_DllExport const Quaternion& orientation_quat() const;

    /*!
     * @brief This function returns a reference to member orientation_quat
     * @return Reference to member orientation_quat
     */
    eProsima_user_DllExport Quaternion& orientation_quat();

    /*!
     * @brief This function returns the maximum serialized size of an object
     * depending on the buffer alignment.
     * @param current_alignment Buffer alignment.
     * @return Maximum serialized size.
     */
    eProsima_user_DllExport static size_t getMaxCdrSerializedSize(
            size_t current_alignment = 0);

    /*!
     * @brief This function returns the serialized size of a data depending on the buffer alignment.
     * @param data Data which is calculated its serialized size.
     * @param current_alignment Buffer alignment.
     * @return Serialized size.
     */
    eProsima_user_DllExport static size_t getCdrSerializedSize(
            const Pose& data,
            size_t current_alignment = 0);


    /*!
     * @brief This function serializes an object using CDR serialization.
     * @param cdr CDR serialization object.
     */
    eProsima_user_DllExport void serialize(
            eprosima::fastcdr::Cdr& cdr) const;

    /*!
     * @brief This function deserializes an object using CDR serialization.
     * @param cdr CDR serialization object.
     */
    eProsima_user_DllExport void deserialize(
            eprosima::fastcdr::Cdr& cdr);



    /*!
     * @brief This function returns the maximum serialized size of the Key of an object
     * depending on the buffer alignment.
     * @param current_alignment Buffer alignment.
     * @return Maximum serialized size.
     */
    eProsima_user_DllExport static size_t getKeyMaxCdrSerializedSize(
            size_t current_alignment = 0);

    /*!
     * @brief This function tells you if the Key has been defined for this type
     */
    eProsima_user_DllExport static bool isKeyDefined();

    /*!
     * @brief This function serializes the key members of an object using CDR serialization.
     * @param cdr CDR serialization object.
     */
    eProsima_user_DllExport void serializeKey(
            eprosima::fastcdr::Cdr& cdr) const;

private:

    Header m_header;
    Position m_position;
    EulerAngleZYZ m_orientation_euler;
    Quaternion m_orientation_quat;
};

#endif // _POSE_H_