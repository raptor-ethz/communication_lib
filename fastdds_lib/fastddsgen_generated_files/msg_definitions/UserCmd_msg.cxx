// Copyright 2016 Proyectos y Sistemas de Mantenimiento SL (eProsima).
//
// Licensed under the Apache License, Version 2.0 (the "License");
// you may not use this file except in compliance with the License.
// You may obtain a copy of the License at
//
//     http://www.apache.org/licenses/LICENSE-2.0
//
// Unless required by applicable law or agreed to in writing, software
// distributed under the License is distributed on an "AS IS" BASIS,
// WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
// See the License for the specific language governing permissions and
// limitations under the License.

/*!
 * @file UserCmd_msg.cpp
 * This source file contains the definition of the described types in the IDL file.
 *
 * This file was generated by the tool gen.
 */

#ifdef _WIN32
// Remove linker warning LNK4221 on Visual Studio
namespace {
char dummy;
}  // namespace
#endif  // _WIN32

#include "UserCmd_msg.h"
#include <fastcdr/Cdr.h>

#include <fastcdr/exceptions/BadParamException.h>
using namespace eprosima::fastcdr::exception;

#include <utility>


idl_msg::UserCmd_msg::UserCmd_msg()
{
    // m_command com.eprosima.idl.parser.typecode.EnumTypeCode@3d680b5a
    m_command = idl_msg::ui_null;

}

idl_msg::UserCmd_msg::~UserCmd_msg()
{
}

idl_msg::UserCmd_msg::UserCmd_msg(
        const UserCmd_msg& x)
{
    m_command = x.m_command;
}

idl_msg::UserCmd_msg::UserCmd_msg(
        UserCmd_msg&& x)
{
    m_command = x.m_command;
}

idl_msg::UserCmd_msg& idl_msg::UserCmd_msg::operator =(
        const UserCmd_msg& x)
{

    m_command = x.m_command;

    return *this;
}

idl_msg::UserCmd_msg& idl_msg::UserCmd_msg::operator =(
        UserCmd_msg&& x)
{

    m_command = x.m_command;

    return *this;
}

bool idl_msg::UserCmd_msg::operator ==(
        const UserCmd_msg& x)
{

    return (m_command == x.m_command);
}

bool idl_msg::UserCmd_msg::operator !=(
        const UserCmd_msg& x)
{
    return !(*this == x);
}

size_t idl_msg::UserCmd_msg::getMaxCdrSerializedSize(
        size_t current_alignment)
{
    size_t initial_alignment = current_alignment;


    current_alignment += 4 + eprosima::fastcdr::Cdr::alignment(current_alignment, 4);


    return current_alignment - initial_alignment;
}

size_t idl_msg::UserCmd_msg::getCdrSerializedSize(
        const idl_msg::UserCmd_msg& data,
        size_t current_alignment)
{
    (void)data;
    size_t initial_alignment = current_alignment;


    current_alignment += 4 + eprosima::fastcdr::Cdr::alignment(current_alignment, 4);


    return current_alignment - initial_alignment;
}

void idl_msg::UserCmd_msg::serialize(
        eprosima::fastcdr::Cdr& scdr) const
{

    scdr << (uint32_t)m_command;

}

void idl_msg::UserCmd_msg::deserialize(
        eprosima::fastcdr::Cdr& dcdr)
{

    {
        uint32_t enum_value = 0;
        dcdr >> enum_value;
        m_command = (idl_msg::User_cmd)enum_value;
    }

}

/*!
 * @brief This function sets a value in member command
 * @param _command New value for member command
 */
void idl_msg::UserCmd_msg::command(
        idl_msg::User_cmd _command)
{
    m_command = _command;
}

/*!
 * @brief This function returns the value of member command
 * @return Value of member command
 */
idl_msg::User_cmd idl_msg::UserCmd_msg::command() const
{
    return m_command;
}

/*!
 * @brief This function returns a reference to member command
 * @return Reference to member command
 */
idl_msg::User_cmd& idl_msg::UserCmd_msg::command()
{
    return m_command;
}


size_t idl_msg::UserCmd_msg::getKeyMaxCdrSerializedSize(
        size_t current_alignment)
{
    size_t current_align = current_alignment;



    return current_align;
}

bool idl_msg::UserCmd_msg::isKeyDefined()
{
    return false;
}

void idl_msg::UserCmd_msg::serializeKey(
        eprosima::fastcdr::Cdr& scdr) const
{
    (void) scdr;
     
}

