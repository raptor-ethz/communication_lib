// Copyright 2016 Proyectos y Sistemas de Mantenimiento SL (eProsima).
//
// Licensed under the Apache License, Version 2.0 (the "License");
// you may not use this file except in compliance with the License.
// You may obtain a copy of the License at
//
//     http://www.apache.org/licenses/LICENSE-2.0
//
// Unless required by applicable law or agreed to in writing, software
// distributed under the License is distributed on an "AS IS" BASIS,
// WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
// See the License for the specific language governing permissions and
// limitations under the License.

/*!
 * @file Velocity_msg.cpp
 * This source file contains the definition of the described types in the IDL file.
 *
 * This file was generated by the tool gen.
 */

#ifdef _WIN32
// Remove linker warning LNK4221 on Visual Studio
namespace {
char dummy;
}  // namespace
#endif  // _WIN32

#include "Velocity_msg.h"
#include <fastcdr/Cdr.h>

#include <fastcdr/exceptions/BadParamException.h>
using namespace eprosima::fastcdr::exception;

#include <utility>

idl_msg::Velocity_msg::Velocity_msg()
{
    // m_vx com.eprosima.idl.parser.typecode.PrimitiveTypeCode@37374a5e
    m_vx = 0.0;
    // m_vy com.eprosima.idl.parser.typecode.PrimitiveTypeCode@4671e53b
    m_vy = 0.0;
    // m_vz com.eprosima.idl.parser.typecode.PrimitiveTypeCode@2db7a79b
    m_vz = 0.0;

}

idl_msg::Velocity_msg::~Velocity_msg()
{



}

idl_msg::Velocity_msg::Velocity_msg(
        const Velocity_msg& x)
{
    m_vx = x.m_vx;
    m_vy = x.m_vy;
    m_vz = x.m_vz;
}

idl_msg::Velocity_msg::Velocity_msg(
        Velocity_msg&& x)
{
    m_vx = x.m_vx;
    m_vy = x.m_vy;
    m_vz = x.m_vz;
}

idl_msg::Velocity_msg& idl_msg::Velocity_msg::operator =(
        const Velocity_msg& x)
{

    m_vx = x.m_vx;
    m_vy = x.m_vy;
    m_vz = x.m_vz;

    return *this;
}

idl_msg::Velocity_msg& idl_msg::Velocity_msg::operator =(
        Velocity_msg&& x)
{

    m_vx = x.m_vx;
    m_vy = x.m_vy;
    m_vz = x.m_vz;

    return *this;
}

bool idl_msg::Velocity_msg::operator ==(
        const Velocity_msg& x)
{

    return (m_vx == x.m_vx && m_vy == x.m_vy && m_vz == x.m_vz);
}

bool idl_msg::Velocity_msg::operator !=(
        const Velocity_msg& x)
{
    return !(*this == x);
}

size_t idl_msg::Velocity_msg::getMaxCdrSerializedSize(
        size_t current_alignment)
{
    size_t initial_alignment = current_alignment;


    current_alignment += 4 + eprosima::fastcdr::Cdr::alignment(current_alignment, 4);


    current_alignment += 4 + eprosima::fastcdr::Cdr::alignment(current_alignment, 4);


    current_alignment += 4 + eprosima::fastcdr::Cdr::alignment(current_alignment, 4);



    return current_alignment - initial_alignment;
}

size_t idl_msg::Velocity_msg::getCdrSerializedSize(
        const idl_msg::Velocity_msg& data,
        size_t current_alignment)
{
    (void)data;
    size_t initial_alignment = current_alignment;


    current_alignment += 4 + eprosima::fastcdr::Cdr::alignment(current_alignment, 4);


    current_alignment += 4 + eprosima::fastcdr::Cdr::alignment(current_alignment, 4);


    current_alignment += 4 + eprosima::fastcdr::Cdr::alignment(current_alignment, 4);



    return current_alignment - initial_alignment;
}

void idl_msg::Velocity_msg::serialize(
        eprosima::fastcdr::Cdr& scdr) const
{

    scdr << m_vx;
    scdr << m_vy;
    scdr << m_vz;

}

void idl_msg::Velocity_msg::deserialize(
        eprosima::fastcdr::Cdr& dcdr)
{

    dcdr >> m_vx;
    dcdr >> m_vy;
    dcdr >> m_vz;
}

/*!
 * @brief This function sets a value in member vx
 * @param _vx New value for member vx
 */
void idl_msg::Velocity_msg::vx(
        float _vx)
{
    m_vx = _vx;
}

/*!
 * @brief This function returns the value of member vx
 * @return Value of member vx
 */
float idl_msg::Velocity_msg::vx() const
{
    return m_vx;
}

/*!
 * @brief This function returns a reference to member vx
 * @return Reference to member vx
 */
float& idl_msg::Velocity_msg::vx()
{
    return m_vx;
}

/*!
 * @brief This function sets a value in member vy
 * @param _vy New value for member vy
 */
void idl_msg::Velocity_msg::vy(
        float _vy)
{
    m_vy = _vy;
}

/*!
 * @brief This function returns the value of member vy
 * @return Value of member vy
 */
float idl_msg::Velocity_msg::vy() const
{
    return m_vy;
}

/*!
 * @brief This function returns a reference to member vy
 * @return Reference to member vy
 */
float& idl_msg::Velocity_msg::vy()
{
    return m_vy;
}

/*!
 * @brief This function sets a value in member vz
 * @param _vz New value for member vz
 */
void idl_msg::Velocity_msg::vz(
        float _vz)
{
    m_vz = _vz;
}

/*!
 * @brief This function returns the value of member vz
 * @return Value of member vz
 */
float idl_msg::Velocity_msg::vz() const
{
    return m_vz;
}

/*!
 * @brief This function returns a reference to member vz
 * @return Reference to member vz
 */
float& idl_msg::Velocity_msg::vz()
{
    return m_vz;
}


size_t idl_msg::Velocity_msg::getKeyMaxCdrSerializedSize(
        size_t current_alignment)
{
    size_t current_align = current_alignment;






    return current_align;
}

bool idl_msg::Velocity_msg::isKeyDefined()
{
    return false;
}

void idl_msg::Velocity_msg::serializeKey(
        eprosima::fastcdr::Cdr& scdr) const
{
    (void) scdr;
       
}

