// Copyright 2016 Proyectos y Sistemas de Mantenimiento SL (eProsima).
//
// Licensed under the Apache License, Version 2.0 (the "License");
// you may not use this file except in compliance with the License.
// You may obtain a copy of the License at
//
//     http://www.apache.org/licenses/LICENSE-2.0
//
// Unless required by applicable law or agreed to in writing, software
// distributed under the License is distributed on an "AS IS" BASIS,
// WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
// See the License for the specific language governing permissions and
// limitations under the License.

/*!
 * @file MocapMarker_msg.cpp
 * This source file contains the definition of the described types in the IDL file.
 *
 * This file was generated by the tool gen.
 */

#ifdef _WIN32
// Remove linker warning LNK4221 on Visual Studio
namespace {
char dummy;
}  // namespace
#endif  // _WIN32

#include "MocapMarker_msg.h"
#include <fastcdr/Cdr.h>

#include <fastcdr/exceptions/BadParamException.h>
using namespace eprosima::fastcdr::exception;

#include <utility>

idl_msg::MocapMarker_msg::MocapMarker_msg()
{
    // m_header com.eprosima.idl.parser.typecode.StringTypeCode@5af97850
    m_header ="";
    // m_length com.eprosima.idl.parser.typecode.PrimitiveTypeCode@16aa0a0a
    m_length = 0;
    // m_occluded com.eprosima.idl.parser.typecode.ArrayTypeCode@780cb77
    memset(&m_occluded, 0, (10) * 1);
    // m_marker_x com.eprosima.idl.parser.typecode.ArrayTypeCode@691a7f8f
    memset(&m_marker_x, 0, (10) * 4);
    // m_marker_y com.eprosima.idl.parser.typecode.ArrayTypeCode@50a7bc6e
    memset(&m_marker_y, 0, (10) * 4);
    // m_marker_z com.eprosima.idl.parser.typecode.ArrayTypeCode@161b062a
    memset(&m_marker_z, 0, (10) * 4);

}

idl_msg::MocapMarker_msg::~MocapMarker_msg()
{






}

idl_msg::MocapMarker_msg::MocapMarker_msg(
        const MocapMarker_msg& x)
{
    m_header = x.m_header;
    m_length = x.m_length;
    m_occluded = x.m_occluded;
    m_marker_x = x.m_marker_x;
    m_marker_y = x.m_marker_y;
    m_marker_z = x.m_marker_z;
}

idl_msg::MocapMarker_msg::MocapMarker_msg(
        MocapMarker_msg&& x)
{
    m_header = std::move(x.m_header);
    m_length = x.m_length;
    m_occluded = std::move(x.m_occluded);
    m_marker_x = std::move(x.m_marker_x);
    m_marker_y = std::move(x.m_marker_y);
    m_marker_z = std::move(x.m_marker_z);
}

idl_msg::MocapMarker_msg& idl_msg::MocapMarker_msg::operator =(
        const MocapMarker_msg& x)
{

    m_header = x.m_header;
    m_length = x.m_length;
    m_occluded = x.m_occluded;
    m_marker_x = x.m_marker_x;
    m_marker_y = x.m_marker_y;
    m_marker_z = x.m_marker_z;

    return *this;
}

idl_msg::MocapMarker_msg& idl_msg::MocapMarker_msg::operator =(
        MocapMarker_msg&& x)
{

    m_header = std::move(x.m_header);
    m_length = x.m_length;
    m_occluded = std::move(x.m_occluded);
    m_marker_x = std::move(x.m_marker_x);
    m_marker_y = std::move(x.m_marker_y);
    m_marker_z = std::move(x.m_marker_z);

    return *this;
}

bool idl_msg::MocapMarker_msg::operator ==(
        const MocapMarker_msg& x)
{

    return (m_header == x.m_header && m_length == x.m_length && m_occluded == x.m_occluded && m_marker_x == x.m_marker_x && m_marker_y == x.m_marker_y && m_marker_z == x.m_marker_z);
}

bool idl_msg::MocapMarker_msg::operator !=(
        const MocapMarker_msg& x)
{
    return !(*this == x);
}

size_t idl_msg::MocapMarker_msg::getMaxCdrSerializedSize(
        size_t current_alignment)
{
    size_t initial_alignment = current_alignment;


    current_alignment += 4 + eprosima::fastcdr::Cdr::alignment(current_alignment, 4) + 255 + 1;

    current_alignment += 4 + eprosima::fastcdr::Cdr::alignment(current_alignment, 4);


    current_alignment += ((10) * 1) + eprosima::fastcdr::Cdr::alignment(current_alignment, 1);


    current_alignment += ((10) * 4) + eprosima::fastcdr::Cdr::alignment(current_alignment, 4);


    current_alignment += ((10) * 4) + eprosima::fastcdr::Cdr::alignment(current_alignment, 4);


    current_alignment += ((10) * 4) + eprosima::fastcdr::Cdr::alignment(current_alignment, 4);



    return current_alignment - initial_alignment;
}

size_t idl_msg::MocapMarker_msg::getCdrSerializedSize(
        const idl_msg::MocapMarker_msg& data,
        size_t current_alignment)
{
    (void)data;
    size_t initial_alignment = current_alignment;


    current_alignment += 4 + eprosima::fastcdr::Cdr::alignment(current_alignment, 4) + data.header().size() + 1;

    current_alignment += 4 + eprosima::fastcdr::Cdr::alignment(current_alignment, 4);


    if ((10) > 0)
    {
        current_alignment += ((10) * 1) + eprosima::fastcdr::Cdr::alignment(current_alignment, 1);
    }

    if ((10) > 0)
    {
        current_alignment += ((10) * 4) + eprosima::fastcdr::Cdr::alignment(current_alignment, 4);
    }

    if ((10) > 0)
    {
        current_alignment += ((10) * 4) + eprosima::fastcdr::Cdr::alignment(current_alignment, 4);
    }

    if ((10) > 0)
    {
        current_alignment += ((10) * 4) + eprosima::fastcdr::Cdr::alignment(current_alignment, 4);
    }


    return current_alignment - initial_alignment;
}

void idl_msg::MocapMarker_msg::serialize(
        eprosima::fastcdr::Cdr& scdr) const
{

    scdr << m_header;
    scdr << m_length;
    scdr << m_occluded;

    scdr << m_marker_x;

    scdr << m_marker_y;

    scdr << m_marker_z;


}

void idl_msg::MocapMarker_msg::deserialize(
        eprosima::fastcdr::Cdr& dcdr)
{

    dcdr >> m_header;
    dcdr >> m_length;
    dcdr >> m_occluded;

    dcdr >> m_marker_x;

    dcdr >> m_marker_y;

    dcdr >> m_marker_z;

}

/*!
 * @brief This function copies the value in member header
 * @param _header New value to be copied in member header
 */
void idl_msg::MocapMarker_msg::header(
        const std::string& _header)
{
    m_header = _header;
}

/*!
 * @brief This function moves the value in member header
 * @param _header New value to be moved in member header
 */
void idl_msg::MocapMarker_msg::header(
        std::string&& _header)
{
    m_header = std::move(_header);
}

/*!
 * @brief This function returns a constant reference to member header
 * @return Constant reference to member header
 */
const std::string& idl_msg::MocapMarker_msg::header() const
{
    return m_header;
}

/*!
 * @brief This function returns a reference to member header
 * @return Reference to member header
 */
std::string& idl_msg::MocapMarker_msg::header()
{
    return m_header;
}
/*!
 * @brief This function sets a value in member length
 * @param _length New value for member length
 */
void idl_msg::MocapMarker_msg::length(
        int32_t _length)
{
    m_length = _length;
}

/*!
 * @brief This function returns the value of member length
 * @return Value of member length
 */
int32_t idl_msg::MocapMarker_msg::length() const
{
    return m_length;
}

/*!
 * @brief This function returns a reference to member length
 * @return Reference to member length
 */
int32_t& idl_msg::MocapMarker_msg::length()
{
    return m_length;
}

/*!
 * @brief This function copies the value in member occluded
 * @param _occluded New value to be copied in member occluded
 */
void idl_msg::MocapMarker_msg::occluded(
        const std::array<bool, 10>& _occluded)
{
    m_occluded = _occluded;
}

/*!
 * @brief This function moves the value in member occluded
 * @param _occluded New value to be moved in member occluded
 */
void idl_msg::MocapMarker_msg::occluded(
        std::array<bool, 10>&& _occluded)
{
    m_occluded = std::move(_occluded);
}

/*!
 * @brief This function returns a constant reference to member occluded
 * @return Constant reference to member occluded
 */
const std::array<bool, 10>& idl_msg::MocapMarker_msg::occluded() const
{
    return m_occluded;
}

/*!
 * @brief This function returns a reference to member occluded
 * @return Reference to member occluded
 */
std::array<bool, 10>& idl_msg::MocapMarker_msg::occluded()
{
    return m_occluded;
}
/*!
 * @brief This function copies the value in member marker_x
 * @param _marker_x New value to be copied in member marker_x
 */
void idl_msg::MocapMarker_msg::marker_x(
        const std::array<float, 10>& _marker_x)
{
    m_marker_x = _marker_x;
}

/*!
 * @brief This function moves the value in member marker_x
 * @param _marker_x New value to be moved in member marker_x
 */
void idl_msg::MocapMarker_msg::marker_x(
        std::array<float, 10>&& _marker_x)
{
    m_marker_x = std::move(_marker_x);
}

/*!
 * @brief This function returns a constant reference to member marker_x
 * @return Constant reference to member marker_x
 */
const std::array<float, 10>& idl_msg::MocapMarker_msg::marker_x() const
{
    return m_marker_x;
}

/*!
 * @brief This function returns a reference to member marker_x
 * @return Reference to member marker_x
 */
std::array<float, 10>& idl_msg::MocapMarker_msg::marker_x()
{
    return m_marker_x;
}
/*!
 * @brief This function copies the value in member marker_y
 * @param _marker_y New value to be copied in member marker_y
 */
void idl_msg::MocapMarker_msg::marker_y(
        const std::array<float, 10>& _marker_y)
{
    m_marker_y = _marker_y;
}

/*!
 * @brief This function moves the value in member marker_y
 * @param _marker_y New value to be moved in member marker_y
 */
void idl_msg::MocapMarker_msg::marker_y(
        std::array<float, 10>&& _marker_y)
{
    m_marker_y = std::move(_marker_y);
}

/*!
 * @brief This function returns a constant reference to member marker_y
 * @return Constant reference to member marker_y
 */
const std::array<float, 10>& idl_msg::MocapMarker_msg::marker_y() const
{
    return m_marker_y;
}

/*!
 * @brief This function returns a reference to member marker_y
 * @return Reference to member marker_y
 */
std::array<float, 10>& idl_msg::MocapMarker_msg::marker_y()
{
    return m_marker_y;
}
/*!
 * @brief This function copies the value in member marker_z
 * @param _marker_z New value to be copied in member marker_z
 */
void idl_msg::MocapMarker_msg::marker_z(
        const std::array<float, 10>& _marker_z)
{
    m_marker_z = _marker_z;
}

/*!
 * @brief This function moves the value in member marker_z
 * @param _marker_z New value to be moved in member marker_z
 */
void idl_msg::MocapMarker_msg::marker_z(
        std::array<float, 10>&& _marker_z)
{
    m_marker_z = std::move(_marker_z);
}

/*!
 * @brief This function returns a constant reference to member marker_z
 * @return Constant reference to member marker_z
 */
const std::array<float, 10>& idl_msg::MocapMarker_msg::marker_z() const
{
    return m_marker_z;
}

/*!
 * @brief This function returns a reference to member marker_z
 * @return Reference to member marker_z
 */
std::array<float, 10>& idl_msg::MocapMarker_msg::marker_z()
{
    return m_marker_z;
}

size_t idl_msg::MocapMarker_msg::getKeyMaxCdrSerializedSize(
        size_t current_alignment)
{
    size_t current_align = current_alignment;









    return current_align;
}

bool idl_msg::MocapMarker_msg::isKeyDefined()
{
    return false;
}

void idl_msg::MocapMarker_msg::serializeKey(
        eprosima::fastcdr::Cdr& scdr) const
{
    (void) scdr;
          
}

