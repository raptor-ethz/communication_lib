// Copyright 2016 Proyectos y Sistemas de Mantenimiento SL (eProsima).
//
// Licensed under the Apache License, Version 2.0 (the "License");
// you may not use this file except in compliance with the License.
// You may obtain a copy of the License at
//
//     http://www.apache.org/licenses/LICENSE-2.0
//
// Unless required by applicable law or agreed to in writing, software
// distributed under the License is distributed on an "AS IS" BASIS,
// WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
// See the License for the specific language governing permissions and
// limitations under the License.

/*!
 * @file Int_msg.cpp
 * This source file contains the definition of the described types in the IDL file.
 *
 * This file was generated by the tool gen.
 */

#ifdef _WIN32
// Remove linker warning LNK4221 on Visual Studio
namespace {
char dummy;
}  // namespace
#endif  // _WIN32

#include "Int_msg.h"
#include <fastcdr/Cdr.h>

#include <fastcdr/exceptions/BadParamException.h>
using namespace eprosima::fastcdr::exception;

#include <utility>

idl_msg::Int_msg::Int_msg()
{
    // m_data com.eprosima.idl.parser.typecode.PrimitiveTypeCode@5cdd8682
    m_data = 0;

}

idl_msg::Int_msg::~Int_msg()
{
}

idl_msg::Int_msg::Int_msg(
        const Int_msg& x)
{
    m_data = x.m_data;
}

idl_msg::Int_msg::Int_msg(
        Int_msg&& x)
{
    m_data = x.m_data;
}

idl_msg::Int_msg& idl_msg::Int_msg::operator =(
        const Int_msg& x)
{

    m_data = x.m_data;

    return *this;
}

idl_msg::Int_msg& idl_msg::Int_msg::operator =(
        Int_msg&& x)
{

    m_data = x.m_data;

    return *this;
}

bool idl_msg::Int_msg::operator ==(
        const Int_msg& x)
{

    return (m_data == x.m_data);
}

bool idl_msg::Int_msg::operator !=(
        const Int_msg& x)
{
    return !(*this == x);
}

size_t idl_msg::Int_msg::getMaxCdrSerializedSize(
        size_t current_alignment)
{
    size_t initial_alignment = current_alignment;


    current_alignment += 4 + eprosima::fastcdr::Cdr::alignment(current_alignment, 4);


    return current_alignment - initial_alignment;
}

size_t idl_msg::Int_msg::getCdrSerializedSize(
        const idl_msg::Int_msg& data,
        size_t current_alignment)
{
    (void)data;
    size_t initial_alignment = current_alignment;


    current_alignment += 4 + eprosima::fastcdr::Cdr::alignment(current_alignment, 4);


    return current_alignment - initial_alignment;
}

void idl_msg::Int_msg::serialize(
        eprosima::fastcdr::Cdr& scdr) const
{

    scdr << m_data;

}

void idl_msg::Int_msg::deserialize(
        eprosima::fastcdr::Cdr& dcdr)
{

    dcdr >> m_data;
}

/*!
 * @brief This function sets a value in member data
 * @param _data New value for member data
 */
void idl_msg::Int_msg::data(
        int32_t _data)
{
    m_data = _data;
}

/*!
 * @brief This function returns the value of member data
 * @return Value of member data
 */
int32_t idl_msg::Int_msg::data() const
{
    return m_data;
}

/*!
 * @brief This function returns a reference to member data
 * @return Reference to member data
 */
int32_t& idl_msg::Int_msg::data()
{
    return m_data;
}


size_t idl_msg::Int_msg::getKeyMaxCdrSerializedSize(
        size_t current_alignment)
{
    size_t current_align = current_alignment;



    return current_align;
}

bool idl_msg::Int_msg::isKeyDefined()
{
    return false;
}

void idl_msg::Int_msg::serializeKey(
        eprosima::fastcdr::Cdr& scdr) const
{
    (void) scdr;
     
}

