// Copyright 2016 Proyectos y Sistemas de Mantenimiento SL (eProsima).
//
// Licensed under the Apache License, Version 2.0 (the "License");
// you may not use this file except in compliance with the License.
// You may obtain a copy of the License at
//
//     http://www.apache.org/licenses/LICENSE-2.0
//
// Unless required by applicable law or agreed to in writing, software
// distributed under the License is distributed on an "AS IS" BASIS,
// WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
// See the License for the specific language governing permissions and
// limitations under the License.

/*!
 * @file Mocap.cpp
 * This source file contains the definition of the described types in the IDL file.
 *
 * This file was generated by the tool gen.
 */

#ifdef _WIN32
// Remove linker warning LNK4221 on Visual Studio
namespace {
char dummy;
}  // namespace
#endif  // _WIN32

#include "Mocap.h"
#include <fastcdr/Cdr.h>

#include <fastcdr/exceptions/BadParamException.h>
using namespace eprosima::fastcdr::exception;

#include <utility>

Mocap::Mocap()
{
    // m_header com.eprosima.fastdds.idl.parser.typecode.StructTypeCode@15bb6bea

    // m_pose com.eprosima.fastdds.idl.parser.typecode.StructTypeCode@8b96fde

    // m_latency com.eprosima.idl.parser.typecode.PrimitiveTypeCode@2d2e5f00
    m_latency = 0.0;

}

Mocap::~Mocap()
{



}

Mocap::Mocap(
        const Mocap& x)
{
    m_header = x.m_header;
    m_pose = x.m_pose;
    m_latency = x.m_latency;
}

Mocap::Mocap(
        Mocap&& x)
{
    m_header = std::move(x.m_header);
    m_pose = std::move(x.m_pose);
    m_latency = x.m_latency;
}

Mocap& Mocap::operator =(
        const Mocap& x)
{

    m_header = x.m_header;
    m_pose = x.m_pose;
    m_latency = x.m_latency;

    return *this;
}

Mocap& Mocap::operator =(
        Mocap&& x)
{

    m_header = std::move(x.m_header);
    m_pose = std::move(x.m_pose);
    m_latency = x.m_latency;

    return *this;
}

size_t Mocap::getMaxCdrSerializedSize(
        size_t current_alignment)
{
    size_t initial_alignment = current_alignment;


    current_alignment += Header::getMaxCdrSerializedSize(current_alignment);
    current_alignment += Pose::getMaxCdrSerializedSize(current_alignment);
    current_alignment += 4 + eprosima::fastcdr::Cdr::alignment(current_alignment, 4);



    return current_alignment - initial_alignment;
}

size_t Mocap::getCdrSerializedSize(
        const Mocap& data,
        size_t current_alignment)
{
    (void)data;
    size_t initial_alignment = current_alignment;


    current_alignment += Header::getCdrSerializedSize(data.header(), current_alignment);
    current_alignment += Pose::getCdrSerializedSize(data.pose(), current_alignment);
    current_alignment += 4 + eprosima::fastcdr::Cdr::alignment(current_alignment, 4);



    return current_alignment - initial_alignment;
}

void Mocap::serialize(
        eprosima::fastcdr::Cdr& scdr) const
{

    scdr << m_header;
    scdr << m_pose;
    scdr << m_latency;

}

void Mocap::deserialize(
        eprosima::fastcdr::Cdr& dcdr)
{

    dcdr >> m_header;
    dcdr >> m_pose;
    dcdr >> m_latency;
}

/*!
 * @brief This function copies the value in member header
 * @param _header New value to be copied in member header
 */
void Mocap::header(
        const Header& _header)
{
    m_header = _header;
}

/*!
 * @brief This function moves the value in member header
 * @param _header New value to be moved in member header
 */
void Mocap::header(
        Header&& _header)
{
    m_header = std::move(_header);
}

/*!
 * @brief This function returns a constant reference to member header
 * @return Constant reference to member header
 */
const Header& Mocap::header() const
{
    return m_header;
}

/*!
 * @brief This function returns a reference to member header
 * @return Reference to member header
 */
Header& Mocap::header()
{
    return m_header;
}
/*!
 * @brief This function copies the value in member pose
 * @param _pose New value to be copied in member pose
 */
void Mocap::pose(
        const Pose& _pose)
{
    m_pose = _pose;
}

/*!
 * @brief This function moves the value in member pose
 * @param _pose New value to be moved in member pose
 */
void Mocap::pose(
        Pose&& _pose)
{
    m_pose = std::move(_pose);
}

/*!
 * @brief This function returns a constant reference to member pose
 * @return Constant reference to member pose
 */
const Pose& Mocap::pose() const
{
    return m_pose;
}

/*!
 * @brief This function returns a reference to member pose
 * @return Reference to member pose
 */
Pose& Mocap::pose()
{
    return m_pose;
}
/*!
 * @brief This function sets a value in member latency
 * @param _latency New value for member latency
 */
void Mocap::latency(
        float _latency)
{
    m_latency = _latency;
}

/*!
 * @brief This function returns the value of member latency
 * @return Value of member latency
 */
float Mocap::latency() const
{
    return m_latency;
}

/*!
 * @brief This function returns a reference to member latency
 * @return Reference to member latency
 */
float& Mocap::latency()
{
    return m_latency;
}


size_t Mocap::getKeyMaxCdrSerializedSize(
        size_t current_alignment)
{
    size_t current_align = current_alignment;






    return current_align;
}

bool Mocap::isKeyDefined()
{
    return false;
}

void Mocap::serializeKey(
        eprosima::fastcdr::Cdr& scdr) const
{
    (void) scdr;
       
}
