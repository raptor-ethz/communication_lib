// Copyright 2016 Proyectos y Sistemas de Mantenimiento SL (eProsima).
//
// Licensed under the Apache License, Version 2.0 (the "License");
// you may not use this file except in compliance with the License.
// You may obtain a copy of the License at
//
//     http://www.apache.org/licenses/LICENSE-2.0
//
// Unless required by applicable law or agreed to in writing, software
// distributed under the License is distributed on an "AS IS" BASIS,
// WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
// See the License for the specific language governing permissions and
// limitations under the License.

/*!
 * @file EulerAngleZYX.cpp
 * This source file contains the definition of the described types in the IDL file.
 *
 * This file was generated by the tool gen.
 */

#ifdef _WIN32
// Remove linker warning LNK4221 on Visual Studio
namespace {
char dummy;
}  // namespace
#endif  // _WIN32

#include "EulerAngleZYX.h"
#include <fastcdr/Cdr.h>

#include <fastcdr/exceptions/BadParamException.h>
using namespace eprosima::fastcdr::exception;

#include <utility>

idl_msg::EulerAngleZYZ::EulerAngleZYZ()
{
    // m_roll com.eprosima.idl.parser.typecode.PrimitiveTypeCode@9d5509a
    m_roll = 0.0;
    // m_pitch com.eprosima.idl.parser.typecode.PrimitiveTypeCode@179ece50
    m_pitch = 0.0;
    // m_yaw com.eprosima.idl.parser.typecode.PrimitiveTypeCode@3b0090a4
    m_yaw = 0.0;

}

idl_msg::EulerAngleZYZ::~EulerAngleZYZ()
{



}

idl_msg::EulerAngleZYZ::EulerAngleZYZ(
        const EulerAngleZYZ& x)
{
    m_roll = x.m_roll;
    m_pitch = x.m_pitch;
    m_yaw = x.m_yaw;
}

idl_msg::EulerAngleZYZ::EulerAngleZYZ(
        EulerAngleZYZ&& x)
{
    m_roll = x.m_roll;
    m_pitch = x.m_pitch;
    m_yaw = x.m_yaw;
}

idl_msg::EulerAngleZYZ& idl_msg::EulerAngleZYZ::operator =(
        const EulerAngleZYZ& x)
{

    m_roll = x.m_roll;
    m_pitch = x.m_pitch;
    m_yaw = x.m_yaw;

    return *this;
}

idl_msg::EulerAngleZYZ& idl_msg::EulerAngleZYZ::operator =(
        EulerAngleZYZ&& x)
{

    m_roll = x.m_roll;
    m_pitch = x.m_pitch;
    m_yaw = x.m_yaw;

    return *this;
}

size_t idl_msg::EulerAngleZYZ::getMaxCdrSerializedSize(
        size_t current_alignment)
{
    size_t initial_alignment = current_alignment;


    current_alignment += 4 + eprosima::fastcdr::Cdr::alignment(current_alignment, 4);


    current_alignment += 4 + eprosima::fastcdr::Cdr::alignment(current_alignment, 4);


    current_alignment += 4 + eprosima::fastcdr::Cdr::alignment(current_alignment, 4);



    return current_alignment - initial_alignment;
}

size_t idl_msg::EulerAngleZYZ::getCdrSerializedSize(
        const idl_msg::EulerAngleZYZ& data,
        size_t current_alignment)
{
    (void)data;
    size_t initial_alignment = current_alignment;


    current_alignment += 4 + eprosima::fastcdr::Cdr::alignment(current_alignment, 4);


    current_alignment += 4 + eprosima::fastcdr::Cdr::alignment(current_alignment, 4);


    current_alignment += 4 + eprosima::fastcdr::Cdr::alignment(current_alignment, 4);



    return current_alignment - initial_alignment;
}

void idl_msg::EulerAngleZYZ::serialize(
        eprosima::fastcdr::Cdr& scdr) const
{

    scdr << m_roll;
    scdr << m_pitch;
    scdr << m_yaw;

}

void idl_msg::EulerAngleZYZ::deserialize(
        eprosima::fastcdr::Cdr& dcdr)
{

    dcdr >> m_roll;
    dcdr >> m_pitch;
    dcdr >> m_yaw;
}

/*!
 * @brief This function sets a value in member roll
 * @param _roll New value for member roll
 */
void idl_msg::EulerAngleZYZ::roll(
        float _roll)
{
    m_roll = _roll;
}

/*!
 * @brief This function returns the value of member roll
 * @return Value of member roll
 */
float idl_msg::EulerAngleZYZ::roll() const
{
    return m_roll;
}

/*!
 * @brief This function returns a reference to member roll
 * @return Reference to member roll
 */
float& idl_msg::EulerAngleZYZ::roll()
{
    return m_roll;
}

/*!
 * @brief This function sets a value in member pitch
 * @param _pitch New value for member pitch
 */
void idl_msg::EulerAngleZYZ::pitch(
        float _pitch)
{
    m_pitch = _pitch;
}

/*!
 * @brief This function returns the value of member pitch
 * @return Value of member pitch
 */
float idl_msg::EulerAngleZYZ::pitch() const
{
    return m_pitch;
}

/*!
 * @brief This function returns a reference to member pitch
 * @return Reference to member pitch
 */
float& idl_msg::EulerAngleZYZ::pitch()
{
    return m_pitch;
}

/*!
 * @brief This function sets a value in member yaw
 * @param _yaw New value for member yaw
 */
void idl_msg::EulerAngleZYZ::yaw(
        float _yaw)
{
    m_yaw = _yaw;
}

/*!
 * @brief This function returns the value of member yaw
 * @return Value of member yaw
 */
float idl_msg::EulerAngleZYZ::yaw() const
{
    return m_yaw;
}

/*!
 * @brief This function returns a reference to member yaw
 * @return Reference to member yaw
 */
float& idl_msg::EulerAngleZYZ::yaw()
{
    return m_yaw;
}


size_t idl_msg::EulerAngleZYZ::getKeyMaxCdrSerializedSize(
        size_t current_alignment)
{
    size_t current_align = current_alignment;






    return current_align;
}

bool idl_msg::EulerAngleZYZ::isKeyDefined()
{
    return false;
}

void idl_msg::EulerAngleZYZ::serializeKey(
        eprosima::fastcdr::Cdr& scdr) const
{
    (void) scdr;
       
}

