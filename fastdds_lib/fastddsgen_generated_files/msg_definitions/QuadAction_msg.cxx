// Copyright 2016 Proyectos y Sistemas de Mantenimiento SL (eProsima).
//
// Licensed under the Apache License, Version 2.0 (the "License");
// you may not use this file except in compliance with the License.
// You may obtain a copy of the License at
//
//     http://www.apache.org/licenses/LICENSE-2.0
//
// Unless required by applicable law or agreed to in writing, software
// distributed under the License is distributed on an "AS IS" BASIS,
// WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
// See the License for the specific language governing permissions and
// limitations under the License.

/*!
 * @file QuadAction_msg.cpp
 * This source file contains the definition of the described types in the IDL file.
 *
 * This file was generated by the tool gen.
 */

#ifdef _WIN32
// Remove linker warning LNK4221 on Visual Studio
namespace {
char dummy;
}  // namespace
#endif  // _WIN32

#include "QuadAction_msg.h"
#include <fastcdr/Cdr.h>

#include <fastcdr/exceptions/BadParamException.h>
using namespace eprosima::fastcdr::exception;

#include <utility>


idl_msg::QuadAction_msg::QuadAction_msg()
{
    // m_action com.eprosima.idl.parser.typecode.EnumTypeCode@327b636c
    m_action = idl_msg::act_status;

}

idl_msg::QuadAction_msg::~QuadAction_msg()
{
}

idl_msg::QuadAction_msg::QuadAction_msg(
        const QuadAction_msg& x)
{
    m_action = x.m_action;
}

idl_msg::QuadAction_msg::QuadAction_msg(
        QuadAction_msg&& x)
{
    m_action = x.m_action;
}

idl_msg::QuadAction_msg& idl_msg::QuadAction_msg::operator =(
        const QuadAction_msg& x)
{

    m_action = x.m_action;

    return *this;
}

idl_msg::QuadAction_msg& idl_msg::QuadAction_msg::operator =(
        QuadAction_msg&& x)
{

    m_action = x.m_action;

    return *this;
}

bool idl_msg::QuadAction_msg::operator ==(
        const QuadAction_msg& x)
{

    return (m_action == x.m_action);
}

bool idl_msg::QuadAction_msg::operator !=(
        const QuadAction_msg& x)
{
    return !(*this == x);
}

size_t idl_msg::QuadAction_msg::getMaxCdrSerializedSize(
        size_t current_alignment)
{
    size_t initial_alignment = current_alignment;


    current_alignment += 4 + eprosima::fastcdr::Cdr::alignment(current_alignment, 4);


    return current_alignment - initial_alignment;
}

size_t idl_msg::QuadAction_msg::getCdrSerializedSize(
        const idl_msg::QuadAction_msg& data,
        size_t current_alignment)
{
    (void)data;
    size_t initial_alignment = current_alignment;


    current_alignment += 4 + eprosima::fastcdr::Cdr::alignment(current_alignment, 4);


    return current_alignment - initial_alignment;
}

void idl_msg::QuadAction_msg::serialize(
        eprosima::fastcdr::Cdr& scdr) const
{

    scdr << (uint32_t)m_action;

}

void idl_msg::QuadAction_msg::deserialize(
        eprosima::fastcdr::Cdr& dcdr)
{

    {
        uint32_t enum_value = 0;
        dcdr >> enum_value;
        m_action = (idl_msg::Action_cmd)enum_value;
    }

}

/*!
 * @brief This function sets a value in member action
 * @param _action New value for member action
 */
void idl_msg::QuadAction_msg::action(
        idl_msg::Action_cmd _action)
{
    m_action = _action;
}

/*!
 * @brief This function returns the value of member action
 * @return Value of member action
 */
idl_msg::Action_cmd idl_msg::QuadAction_msg::action() const
{
    return m_action;
}

/*!
 * @brief This function returns a reference to member action
 * @return Reference to member action
 */
idl_msg::Action_cmd& idl_msg::QuadAction_msg::action()
{
    return m_action;
}


size_t idl_msg::QuadAction_msg::getKeyMaxCdrSerializedSize(
        size_t current_alignment)
{
    size_t current_align = current_alignment;



    return current_align;
}

bool idl_msg::QuadAction_msg::isKeyDefined()
{
    return false;
}

void idl_msg::QuadAction_msg::serializeKey(
        eprosima::fastcdr::Cdr& scdr) const
{
    (void) scdr;
     
}

