// Copyright 2016 Proyectos y Sistemas de Mantenimiento SL (eProsima).
//
// Licensed under the Apache License, Version 2.0 (the "License");
// you may not use this file except in compliance with the License.
// You may obtain a copy of the License at
//
//     http://www.apache.org/licenses/LICENSE-2.0
//
// Unless required by applicable law or agreed to in writing, software
// distributed under the License is distributed on an "AS IS" BASIS,
// WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
// See the License for the specific language governing permissions and
// limitations under the License.

/*!
 * @file Vector3i_msg.cpp
 * This source file contains the definition of the described types in the IDL file.
 *
 * This file was generated by the tool gen.
 */

#ifdef _WIN32
// Remove linker warning LNK4221 on Visual Studio
namespace {
char dummy;
}  // namespace
#endif  // _WIN32

#include "Vector3i_msg.h"
#include <fastcdr/Cdr.h>

#include <fastcdr/exceptions/BadParamException.h>
using namespace eprosima::fastcdr::exception;

#include <utility>

idl_msg::Vector3i_msg::Vector3i_msg()
{
    // m_x com.eprosima.idl.parser.typecode.PrimitiveTypeCode@f5ac9e4
    m_x = 0;
    // m_y com.eprosima.idl.parser.typecode.PrimitiveTypeCode@123ef382
    m_y = 0;
    // m_z com.eprosima.idl.parser.typecode.PrimitiveTypeCode@dbf57b3
    m_z = 0;

}

idl_msg::Vector3i_msg::~Vector3i_msg()
{



}

idl_msg::Vector3i_msg::Vector3i_msg(
        const Vector3i_msg& x)
{
    m_x = x.m_x;
    m_y = x.m_y;
    m_z = x.m_z;
}

idl_msg::Vector3i_msg::Vector3i_msg(
        Vector3i_msg&& x)
{
    m_x = x.m_x;
    m_y = x.m_y;
    m_z = x.m_z;
}

idl_msg::Vector3i_msg& idl_msg::Vector3i_msg::operator =(
        const Vector3i_msg& x)
{

    m_x = x.m_x;
    m_y = x.m_y;
    m_z = x.m_z;

    return *this;
}

idl_msg::Vector3i_msg& idl_msg::Vector3i_msg::operator =(
        Vector3i_msg&& x)
{

    m_x = x.m_x;
    m_y = x.m_y;
    m_z = x.m_z;

    return *this;
}

bool idl_msg::Vector3i_msg::operator ==(
        const Vector3i_msg& x)
{

    return (m_x == x.m_x && m_y == x.m_y && m_z == x.m_z);
}

bool idl_msg::Vector3i_msg::operator !=(
        const Vector3i_msg& x)
{
    return !(*this == x);
}

size_t idl_msg::Vector3i_msg::getMaxCdrSerializedSize(
        size_t current_alignment)
{
    size_t initial_alignment = current_alignment;


    current_alignment += 4 + eprosima::fastcdr::Cdr::alignment(current_alignment, 4);


    current_alignment += 4 + eprosima::fastcdr::Cdr::alignment(current_alignment, 4);


    current_alignment += 4 + eprosima::fastcdr::Cdr::alignment(current_alignment, 4);



    return current_alignment - initial_alignment;
}

size_t idl_msg::Vector3i_msg::getCdrSerializedSize(
        const idl_msg::Vector3i_msg& data,
        size_t current_alignment)
{
    (void)data;
    size_t initial_alignment = current_alignment;


    current_alignment += 4 + eprosima::fastcdr::Cdr::alignment(current_alignment, 4);


    current_alignment += 4 + eprosima::fastcdr::Cdr::alignment(current_alignment, 4);


    current_alignment += 4 + eprosima::fastcdr::Cdr::alignment(current_alignment, 4);



    return current_alignment - initial_alignment;
}

void idl_msg::Vector3i_msg::serialize(
        eprosima::fastcdr::Cdr& scdr) const
{

    scdr << m_x;
    scdr << m_y;
    scdr << m_z;

}

void idl_msg::Vector3i_msg::deserialize(
        eprosima::fastcdr::Cdr& dcdr)
{

    dcdr >> m_x;
    dcdr >> m_y;
    dcdr >> m_z;
}

/*!
 * @brief This function sets a value in member x
 * @param _x New value for member x
 */
void idl_msg::Vector3i_msg::x(
        int32_t _x)
{
    m_x = _x;
}

/*!
 * @brief This function returns the value of member x
 * @return Value of member x
 */
int32_t idl_msg::Vector3i_msg::x() const
{
    return m_x;
}

/*!
 * @brief This function returns a reference to member x
 * @return Reference to member x
 */
int32_t& idl_msg::Vector3i_msg::x()
{
    return m_x;
}

/*!
 * @brief This function sets a value in member y
 * @param _y New value for member y
 */
void idl_msg::Vector3i_msg::y(
        int32_t _y)
{
    m_y = _y;
}

/*!
 * @brief This function returns the value of member y
 * @return Value of member y
 */
int32_t idl_msg::Vector3i_msg::y() const
{
    return m_y;
}

/*!
 * @brief This function returns a reference to member y
 * @return Reference to member y
 */
int32_t& idl_msg::Vector3i_msg::y()
{
    return m_y;
}

/*!
 * @brief This function sets a value in member z
 * @param _z New value for member z
 */
void idl_msg::Vector3i_msg::z(
        int32_t _z)
{
    m_z = _z;
}

/*!
 * @brief This function returns the value of member z
 * @return Value of member z
 */
int32_t idl_msg::Vector3i_msg::z() const
{
    return m_z;
}

/*!
 * @brief This function returns a reference to member z
 * @return Reference to member z
 */
int32_t& idl_msg::Vector3i_msg::z()
{
    return m_z;
}


size_t idl_msg::Vector3i_msg::getKeyMaxCdrSerializedSize(
        size_t current_alignment)
{
    size_t current_align = current_alignment;






    return current_align;
}

bool idl_msg::Vector3i_msg::isKeyDefined()
{
    return false;
}

void idl_msg::Vector3i_msg::serializeKey(
        eprosima::fastcdr::Cdr& scdr) const
{
    (void) scdr;
       
}

