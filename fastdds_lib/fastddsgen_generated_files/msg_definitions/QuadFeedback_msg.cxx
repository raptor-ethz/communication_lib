// Copyright 2016 Proyectos y Sistemas de Mantenimiento SL (eProsima).
//
// Licensed under the Apache License, Version 2.0 (the "License");
// you may not use this file except in compliance with the License.
// You may obtain a copy of the License at
//
//     http://www.apache.org/licenses/LICENSE-2.0
//
// Unless required by applicable law or agreed to in writing, software
// distributed under the License is distributed on an "AS IS" BASIS,
// WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
// See the License for the specific language governing permissions and
// limitations under the License.

/*!
 * @file QuadFeedback_msg.cpp
 * This source file contains the definition of the described types in the IDL file.
 *
 * This file was generated by the tool gen.
 */

#ifdef _WIN32
// Remove linker warning LNK4221 on Visual Studio
namespace {
char dummy;
}  // namespace
#endif  // _WIN32

#include "QuadFeedback_msg.h"
#include <fastcdr/Cdr.h>

#include <fastcdr/exceptions/BadParamException.h>
using namespace eprosima::fastcdr::exception;

#include <utility>



idl_msg::QuadFeedback_msg::QuadFeedback_msg()
{
    // m_feedback com.eprosima.idl.parser.typecode.EnumTypeCode@6a01e23
    m_feedback = idl_msg::fb_null;
    // m_status com.eprosima.fastdds.idl.parser.typecode.StructTypeCode@5a955565

    // m_result com.eprosima.idl.parser.typecode.EnumTypeCode@6293abcc
    m_result = idl_msg::res_null;

}

idl_msg::QuadFeedback_msg::~QuadFeedback_msg()
{



}

idl_msg::QuadFeedback_msg::QuadFeedback_msg(
        const QuadFeedback_msg& x)
{
    m_feedback = x.m_feedback;
    m_status = x.m_status;
    m_result = x.m_result;
}

idl_msg::QuadFeedback_msg::QuadFeedback_msg(
        QuadFeedback_msg&& x)
{
    m_feedback = x.m_feedback;
    m_status = std::move(x.m_status);
    m_result = x.m_result;
}

idl_msg::QuadFeedback_msg& idl_msg::QuadFeedback_msg::operator =(
        const QuadFeedback_msg& x)
{

    m_feedback = x.m_feedback;
    m_status = x.m_status;
    m_result = x.m_result;

    return *this;
}

idl_msg::QuadFeedback_msg& idl_msg::QuadFeedback_msg::operator =(
        QuadFeedback_msg&& x)
{

    m_feedback = x.m_feedback;
    m_status = std::move(x.m_status);
    m_result = x.m_result;

    return *this;
}

bool idl_msg::QuadFeedback_msg::operator ==(
        const QuadFeedback_msg& x)
{

    return (m_feedback == x.m_feedback && m_status == x.m_status && m_result == x.m_result);
}

bool idl_msg::QuadFeedback_msg::operator !=(
        const QuadFeedback_msg& x)
{
    return !(*this == x);
}

size_t idl_msg::QuadFeedback_msg::getMaxCdrSerializedSize(
        size_t current_alignment)
{
    size_t initial_alignment = current_alignment;


    current_alignment += 4 + eprosima::fastcdr::Cdr::alignment(current_alignment, 4);


    current_alignment += idl_msg::QuadStatus_msg::getMaxCdrSerializedSize(current_alignment);
    current_alignment += 4 + eprosima::fastcdr::Cdr::alignment(current_alignment, 4);



    return current_alignment - initial_alignment;
}

size_t idl_msg::QuadFeedback_msg::getCdrSerializedSize(
        const idl_msg::QuadFeedback_msg& data,
        size_t current_alignment)
{
    (void)data;
    size_t initial_alignment = current_alignment;


    current_alignment += 4 + eprosima::fastcdr::Cdr::alignment(current_alignment, 4);


    current_alignment += idl_msg::QuadStatus_msg::getCdrSerializedSize(data.status(), current_alignment);
    current_alignment += 4 + eprosima::fastcdr::Cdr::alignment(current_alignment, 4);



    return current_alignment - initial_alignment;
}

void idl_msg::QuadFeedback_msg::serialize(
        eprosima::fastcdr::Cdr& scdr) const
{

    scdr << (uint32_t)m_feedback;
    scdr << m_status;
    scdr << (uint32_t)m_result;

}

void idl_msg::QuadFeedback_msg::deserialize(
        eprosima::fastcdr::Cdr& dcdr)
{

    {
        uint32_t enum_value = 0;
        dcdr >> enum_value;
        m_feedback = (idl_msg::FeedbackType)enum_value;
    }

    dcdr >> m_status;
    {
        uint32_t enum_value = 0;
        dcdr >> enum_value;
        m_result = (idl_msg::ResultType)enum_value;
    }

}

/*!
 * @brief This function sets a value in member feedback
 * @param _feedback New value for member feedback
 */
void idl_msg::QuadFeedback_msg::feedback(
        idl_msg::FeedbackType _feedback)
{
    m_feedback = _feedback;
}

/*!
 * @brief This function returns the value of member feedback
 * @return Value of member feedback
 */
idl_msg::FeedbackType idl_msg::QuadFeedback_msg::feedback() const
{
    return m_feedback;
}

/*!
 * @brief This function returns a reference to member feedback
 * @return Reference to member feedback
 */
idl_msg::FeedbackType& idl_msg::QuadFeedback_msg::feedback()
{
    return m_feedback;
}

/*!
 * @brief This function copies the value in member status
 * @param _status New value to be copied in member status
 */
void idl_msg::QuadFeedback_msg::status(
        const idl_msg::QuadStatus_msg& _status)
{
    m_status = _status;
}

/*!
 * @brief This function moves the value in member status
 * @param _status New value to be moved in member status
 */
void idl_msg::QuadFeedback_msg::status(
        idl_msg::QuadStatus_msg&& _status)
{
    m_status = std::move(_status);
}

/*!
 * @brief This function returns a constant reference to member status
 * @return Constant reference to member status
 */
const idl_msg::QuadStatus_msg& idl_msg::QuadFeedback_msg::status() const
{
    return m_status;
}

/*!
 * @brief This function returns a reference to member status
 * @return Reference to member status
 */
idl_msg::QuadStatus_msg& idl_msg::QuadFeedback_msg::status()
{
    return m_status;
}
/*!
 * @brief This function sets a value in member result
 * @param _result New value for member result
 */
void idl_msg::QuadFeedback_msg::result(
        idl_msg::ResultType _result)
{
    m_result = _result;
}

/*!
 * @brief This function returns the value of member result
 * @return Value of member result
 */
idl_msg::ResultType idl_msg::QuadFeedback_msg::result() const
{
    return m_result;
}

/*!
 * @brief This function returns a reference to member result
 * @return Reference to member result
 */
idl_msg::ResultType& idl_msg::QuadFeedback_msg::result()
{
    return m_result;
}


size_t idl_msg::QuadFeedback_msg::getKeyMaxCdrSerializedSize(
        size_t current_alignment)
{
    size_t current_align = current_alignment;






    return current_align;
}

bool idl_msg::QuadFeedback_msg::isKeyDefined()
{
    return false;
}

void idl_msg::QuadFeedback_msg::serializeKey(
        eprosima::fastcdr::Cdr& scdr) const
{
    (void) scdr;
       
}

