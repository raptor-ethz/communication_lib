// Copyright 2016 Proyectos y Sistemas de Mantenimiento SL (eProsima).
//
// Licensed under the Apache License, Version 2.0 (the "License");
// you may not use this file except in compliance with the License.
// You may obtain a copy of the License at
//
//     http://www.apache.org/licenses/LICENSE-2.0
//
// Unless required by applicable law or agreed to in writing, software
// distributed under the License is distributed on an "AS IS" BASIS,
// WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
// See the License for the specific language governing permissions and
// limitations under the License.

/*!
 * @file QuadStatus_msg.cpp
 * This source file contains the definition of the described types in the IDL file.
 *
 * This file was generated by the tool gen.
 */

#ifdef _WIN32
// Remove linker warning LNK4221 on Visual Studio
namespace {
char dummy;
}  // namespace
#endif  // _WIN32

#include "QuadStatus_msg.h"
#include <fastcdr/Cdr.h>

#include <fastcdr/exceptions/BadParamException.h>
using namespace eprosima::fastcdr::exception;

#include <utility>

idl_msg::QuadStatus_msg::QuadStatus_msg()
{
    // m_battery com.eprosima.idl.parser.typecode.PrimitiveTypeCode@6b26e945
    m_battery = 0;
    // m_armable com.eprosima.idl.parser.typecode.PrimitiveTypeCode@63a65a25
    m_armable = false;
    // m_local_position_ok com.eprosima.idl.parser.typecode.PrimitiveTypeCode@54c562f7
    m_local_position_ok = false;

}

idl_msg::QuadStatus_msg::~QuadStatus_msg()
{



}

idl_msg::QuadStatus_msg::QuadStatus_msg(
        const QuadStatus_msg& x)
{
    m_battery = x.m_battery;
    m_armable = x.m_armable;
    m_local_position_ok = x.m_local_position_ok;
}

idl_msg::QuadStatus_msg::QuadStatus_msg(
        QuadStatus_msg&& x)
{
    m_battery = x.m_battery;
    m_armable = x.m_armable;
    m_local_position_ok = x.m_local_position_ok;
}

idl_msg::QuadStatus_msg& idl_msg::QuadStatus_msg::operator =(
        const QuadStatus_msg& x)
{

    m_battery = x.m_battery;
    m_armable = x.m_armable;
    m_local_position_ok = x.m_local_position_ok;

    return *this;
}

idl_msg::QuadStatus_msg& idl_msg::QuadStatus_msg::operator =(
        QuadStatus_msg&& x)
{

    m_battery = x.m_battery;
    m_armable = x.m_armable;
    m_local_position_ok = x.m_local_position_ok;

    return *this;
}

bool idl_msg::QuadStatus_msg::operator ==(
        const QuadStatus_msg& x)
{

    return (m_battery == x.m_battery && m_armable == x.m_armable && m_local_position_ok == x.m_local_position_ok);
}

bool idl_msg::QuadStatus_msg::operator !=(
        const QuadStatus_msg& x)
{
    return !(*this == x);
}

size_t idl_msg::QuadStatus_msg::getMaxCdrSerializedSize(
        size_t current_alignment)
{
    size_t initial_alignment = current_alignment;


    current_alignment += 4 + eprosima::fastcdr::Cdr::alignment(current_alignment, 4);


    current_alignment += 1 + eprosima::fastcdr::Cdr::alignment(current_alignment, 1);


    current_alignment += 1 + eprosima::fastcdr::Cdr::alignment(current_alignment, 1);



    return current_alignment - initial_alignment;
}

size_t idl_msg::QuadStatus_msg::getCdrSerializedSize(
        const idl_msg::QuadStatus_msg& data,
        size_t current_alignment)
{
    (void)data;
    size_t initial_alignment = current_alignment;


    current_alignment += 4 + eprosima::fastcdr::Cdr::alignment(current_alignment, 4);


    current_alignment += 1 + eprosima::fastcdr::Cdr::alignment(current_alignment, 1);


    current_alignment += 1 + eprosima::fastcdr::Cdr::alignment(current_alignment, 1);



    return current_alignment - initial_alignment;
}

void idl_msg::QuadStatus_msg::serialize(
        eprosima::fastcdr::Cdr& scdr) const
{

    scdr << m_battery;
    scdr << m_armable;
    scdr << m_local_position_ok;

}

void idl_msg::QuadStatus_msg::deserialize(
        eprosima::fastcdr::Cdr& dcdr)
{

    dcdr >> m_battery;
    dcdr >> m_armable;
    dcdr >> m_local_position_ok;
}

/*!
 * @brief This function sets a value in member battery
 * @param _battery New value for member battery
 */
void idl_msg::QuadStatus_msg::battery(
        int32_t _battery)
{
    m_battery = _battery;
}

/*!
 * @brief This function returns the value of member battery
 * @return Value of member battery
 */
int32_t idl_msg::QuadStatus_msg::battery() const
{
    return m_battery;
}

/*!
 * @brief This function returns a reference to member battery
 * @return Reference to member battery
 */
int32_t& idl_msg::QuadStatus_msg::battery()
{
    return m_battery;
}

/*!
 * @brief This function sets a value in member armable
 * @param _armable New value for member armable
 */
void idl_msg::QuadStatus_msg::armable(
        bool _armable)
{
    m_armable = _armable;
}

/*!
 * @brief This function returns the value of member armable
 * @return Value of member armable
 */
bool idl_msg::QuadStatus_msg::armable() const
{
    return m_armable;
}

/*!
 * @brief This function returns a reference to member armable
 * @return Reference to member armable
 */
bool& idl_msg::QuadStatus_msg::armable()
{
    return m_armable;
}

/*!
 * @brief This function sets a value in member local_position_ok
 * @param _local_position_ok New value for member local_position_ok
 */
void idl_msg::QuadStatus_msg::local_position_ok(
        bool _local_position_ok)
{
    m_local_position_ok = _local_position_ok;
}

/*!
 * @brief This function returns the value of member local_position_ok
 * @return Value of member local_position_ok
 */
bool idl_msg::QuadStatus_msg::local_position_ok() const
{
    return m_local_position_ok;
}

/*!
 * @brief This function returns a reference to member local_position_ok
 * @return Reference to member local_position_ok
 */
bool& idl_msg::QuadStatus_msg::local_position_ok()
{
    return m_local_position_ok;
}


size_t idl_msg::QuadStatus_msg::getKeyMaxCdrSerializedSize(
        size_t current_alignment)
{
    size_t current_align = current_alignment;






    return current_align;
}

bool idl_msg::QuadStatus_msg::isKeyDefined()
{
    return false;
}

void idl_msg::QuadStatus_msg::serializeKey(
        eprosima::fastcdr::Cdr& scdr) const
{
    (void) scdr;
       
}

