// Copyright 2016 Proyectos y Sistemas de Mantenimiento SL (eProsima).
//
// Licensed under the Apache License, Version 2.0 (the "License");
// you may not use this file except in compliance with the License.
// You may obtain a copy of the License at
//
//     http://www.apache.org/licenses/LICENSE-2.0
//
// Unless required by applicable law or agreed to in writing, software
// distributed under the License is distributed on an "AS IS" BASIS,
// WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
// See the License for the specific language governing permissions and
// limitations under the License.

/*!
 * @file GripCmd_msg.h
 * This header file contains the declaration of the described types in the IDL file.
 *
 * This file was generated by the tool gen.
 */

#ifndef _IDL_MSG_GRIPCMD_MSG_H_
#define _IDL_MSG_GRIPCMD_MSG_H_


#include <stdint.h>
#include <array>
#include <string>
#include <vector>
#include <map>
#include <bitset>

#if defined(_WIN32)
#if defined(EPROSIMA_USER_DLL_EXPORT)
#define eProsima_user_DllExport __declspec( dllexport )
#else
#define eProsima_user_DllExport
#endif  // EPROSIMA_USER_DLL_EXPORT
#else
#define eProsima_user_DllExport
#endif  // _WIN32

#if defined(_WIN32)
#if defined(EPROSIMA_USER_DLL_EXPORT)
#if defined(GripCmd_msg_SOURCE)
#define GripCmd_msg_DllAPI __declspec( dllexport )
#else
#define GripCmd_msg_DllAPI __declspec( dllimport )
#endif // GripCmd_msg_SOURCE
#else
#define GripCmd_msg_DllAPI
#endif  // EPROSIMA_USER_DLL_EXPORT
#else
#define GripCmd_msg_DllAPI
#endif // _WIN32

namespace eprosima {
namespace fastcdr {
class Cdr;
} // namespace fastcdr
} // namespace eprosima


namespace idl_msg {
    /*!
     * @brief This class represents the enumeration GripperType defined by the user in the IDL file.
     * @ingroup GRIPCMD_MSG
     */
    enum GripperType : uint32_t
    {
        grip_rot,
        grip_lin,
        grip_rotlin
    };
    /*!
     * @brief This class represents the structure GripCmd_msg defined by the user in the IDL file.
     * @ingroup GRIPCMD_MSG
     */
    class GripCmd_msg
    {
    public:

        /*!
         * @brief Default constructor.
         */
        eProsima_user_DllExport GripCmd_msg();

        /*!
         * @brief Default destructor.
         */
        eProsima_user_DllExport ~GripCmd_msg();

        /*!
         * @brief Copy constructor.
         * @param x Reference to the object idl_msg::GripCmd_msg that will be copied.
         */
        eProsima_user_DllExport GripCmd_msg(
                const GripCmd_msg& x);

        /*!
         * @brief Move constructor.
         * @param x Reference to the object idl_msg::GripCmd_msg that will be copied.
         */
        eProsima_user_DllExport GripCmd_msg(
                GripCmd_msg&& x);

        /*!
         * @brief Copy assignment.
         * @param x Reference to the object idl_msg::GripCmd_msg that will be copied.
         */
        eProsima_user_DllExport GripCmd_msg& operator =(
                const GripCmd_msg& x);

        /*!
         * @brief Move assignment.
         * @param x Reference to the object idl_msg::GripCmd_msg that will be copied.
         */
        eProsima_user_DllExport GripCmd_msg& operator =(
                GripCmd_msg&& x);

        /*!
         * @brief Comparison operator.
         * @param x idl_msg::GripCmd_msg object to compare.
         */
        eProsima_user_DllExport bool operator ==(
                const GripCmd_msg& x);

        /*!
         * @brief Comparison operator.
         * @param x idl_msg::GripCmd_msg object to compare.
         */
        eProsima_user_DllExport bool operator !=(
                const GripCmd_msg& x);

        /*!
         * @brief This function sets a value in member gripper
         * @param _gripper New value for member gripper
         */
        eProsima_user_DllExport void gripper(
                idl_msg::GripperType _gripper);

        /*!
         * @brief This function returns the value of member gripper
         * @return Value of member gripper
         */
        eProsima_user_DllExport idl_msg::GripperType gripper() const;

        /*!
         * @brief This function returns a reference to member gripper
         * @return Reference to member gripper
         */
        eProsima_user_DllExport idl_msg::GripperType& gripper();

        /*!
         * @brief This function sets a value in member servo_1_deg
         * @param _servo_1_deg New value for member servo_1_deg
         */
        eProsima_user_DllExport void servo_1_deg(
                int32_t _servo_1_deg);

        /*!
         * @brief This function returns the value of member servo_1_deg
         * @return Value of member servo_1_deg
         */
        eProsima_user_DllExport int32_t servo_1_deg() const;

        /*!
         * @brief This function returns a reference to member servo_1_deg
         * @return Reference to member servo_1_deg
         */
        eProsima_user_DllExport int32_t& servo_1_deg();

        /*!
         * @brief This function sets a value in member servo_2_deg
         * @param _servo_2_deg New value for member servo_2_deg
         */
        eProsima_user_DllExport void servo_2_deg(
                int32_t _servo_2_deg);

        /*!
         * @brief This function returns the value of member servo_2_deg
         * @return Value of member servo_2_deg
         */
        eProsima_user_DllExport int32_t servo_2_deg() const;

        /*!
         * @brief This function returns a reference to member servo_2_deg
         * @return Reference to member servo_2_deg
         */
        eProsima_user_DllExport int32_t& servo_2_deg();

        /*!
         * @brief This function sets a value in member servo_3_deg
         * @param _servo_3_deg New value for member servo_3_deg
         */
        eProsima_user_DllExport void servo_3_deg(
                int32_t _servo_3_deg);

        /*!
         * @brief This function returns the value of member servo_3_deg
         * @return Value of member servo_3_deg
         */
        eProsima_user_DllExport int32_t servo_3_deg() const;

        /*!
         * @brief This function returns a reference to member servo_3_deg
         * @return Reference to member servo_3_deg
         */
        eProsima_user_DllExport int32_t& servo_3_deg();

        /*!
         * @brief This function sets a value in member trigger_gripper
         * @param _trigger_gripper New value for member trigger_gripper
         */
        eProsima_user_DllExport void trigger_gripper(
                bool _trigger_gripper);

        /*!
         * @brief This function returns the value of member trigger_gripper
         * @return Value of member trigger_gripper
         */
        eProsima_user_DllExport bool trigger_gripper() const;

        /*!
         * @brief This function returns a reference to member trigger_gripper
         * @return Reference to member trigger_gripper
         */
        eProsima_user_DllExport bool& trigger_gripper();

        /*!
         * @brief This function sets a value in member request_sensor
         * @param _request_sensor New value for member request_sensor
         */
        eProsima_user_DllExport void request_sensor(
                bool _request_sensor);

        /*!
         * @brief This function returns the value of member request_sensor
         * @return Value of member request_sensor
         */
        eProsima_user_DllExport bool request_sensor() const;

        /*!
         * @brief This function returns a reference to member request_sensor
         * @return Reference to member request_sensor
         */
        eProsima_user_DllExport bool& request_sensor();


        /*!
         * @brief This function returns the maximum serialized size of an object
         * depending on the buffer alignment.
         * @param current_alignment Buffer alignment.
         * @return Maximum serialized size.
         */
        eProsima_user_DllExport static size_t getMaxCdrSerializedSize(
                size_t current_alignment = 0);

        /*!
         * @brief This function returns the serialized size of a data depending on the buffer alignment.
         * @param data Data which is calculated its serialized size.
         * @param current_alignment Buffer alignment.
         * @return Serialized size.
         */
        eProsima_user_DllExport static size_t getCdrSerializedSize(
                const idl_msg::GripCmd_msg& data,
                size_t current_alignment = 0);


        /*!
         * @brief This function serializes an object using CDR serialization.
         * @param cdr CDR serialization object.
         */
        eProsima_user_DllExport void serialize(
                eprosima::fastcdr::Cdr& cdr) const;

        /*!
         * @brief This function deserializes an object using CDR serialization.
         * @param cdr CDR serialization object.
         */
        eProsima_user_DllExport void deserialize(
                eprosima::fastcdr::Cdr& cdr);



        /*!
         * @brief This function returns the maximum serialized size of the Key of an object
         * depending on the buffer alignment.
         * @param current_alignment Buffer alignment.
         * @return Maximum serialized size.
         */
        eProsima_user_DllExport static size_t getKeyMaxCdrSerializedSize(
                size_t current_alignment = 0);

        /*!
         * @brief This function tells you if the Key has been defined for this type
         */
        eProsima_user_DllExport static bool isKeyDefined();

        /*!
         * @brief This function serializes the key members of an object using CDR serialization.
         * @param cdr CDR serialization object.
         */
        eProsima_user_DllExport void serializeKey(
                eprosima::fastcdr::Cdr& cdr) const;

    private:

        idl_msg::GripperType m_gripper;
        int32_t m_servo_1_deg;
        int32_t m_servo_2_deg;
        int32_t m_servo_3_deg;
        bool m_trigger_gripper;
        bool m_request_sensor;
    };
} // namespace idl_msg

#endif // _IDL_MSG_GRIPCMD_MSG_H_