// Copyright 2016 Proyectos y Sistemas de Mantenimiento SL (eProsima).
//
// Licensed under the Apache License, Version 2.0 (the "License");
// you may not use this file except in compliance with the License.
// You may obtain a copy of the License at
//
//     http://www.apache.org/licenses/LICENSE-2.0
//
// Unless required by applicable law or agreed to in writing, software
// distributed under the License is distributed on an "AS IS" BASIS,
// WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
// See the License for the specific language governing permissions and
// limitations under the License.

/*!
 * @file RotGripCmd_msg.cpp
 * This source file contains the definition of the described types in the IDL file.
 *
 * This file was generated by the tool gen.
 */

#ifdef _WIN32
// Remove linker warning LNK4221 on Visual Studio
namespace {
char dummy;
}  // namespace
#endif  // _WIN32

#include "RotGripCmd_msg.h"
#include <fastcdr/Cdr.h>

#include <fastcdr/exceptions/BadParamException.h>
using namespace eprosima::fastcdr::exception;

#include <utility>

idl_msg::RotGripCmd_msg::RotGripCmd_msg()
{
    // m_front_arm_deg com.eprosima.idl.parser.typecode.PrimitiveTypeCode@76908cc0
    m_front_arm_deg = 0;
    // m_back_arm_deg com.eprosima.idl.parser.typecode.PrimitiveTypeCode@2473d930
    m_back_arm_deg = 0;
    // m_trigger_gripper com.eprosima.idl.parser.typecode.PrimitiveTypeCode@35047d03
    m_trigger_gripper = false;

}

idl_msg::RotGripCmd_msg::~RotGripCmd_msg()
{



}

idl_msg::RotGripCmd_msg::RotGripCmd_msg(
        const RotGripCmd_msg& x)
{
    m_front_arm_deg = x.m_front_arm_deg;
    m_back_arm_deg = x.m_back_arm_deg;
    m_trigger_gripper = x.m_trigger_gripper;
}

idl_msg::RotGripCmd_msg::RotGripCmd_msg(
        RotGripCmd_msg&& x)
{
    m_front_arm_deg = x.m_front_arm_deg;
    m_back_arm_deg = x.m_back_arm_deg;
    m_trigger_gripper = x.m_trigger_gripper;
}

idl_msg::RotGripCmd_msg& idl_msg::RotGripCmd_msg::operator =(
        const RotGripCmd_msg& x)
{

    m_front_arm_deg = x.m_front_arm_deg;
    m_back_arm_deg = x.m_back_arm_deg;
    m_trigger_gripper = x.m_trigger_gripper;

    return *this;
}

idl_msg::RotGripCmd_msg& idl_msg::RotGripCmd_msg::operator =(
        RotGripCmd_msg&& x)
{

    m_front_arm_deg = x.m_front_arm_deg;
    m_back_arm_deg = x.m_back_arm_deg;
    m_trigger_gripper = x.m_trigger_gripper;

    return *this;
}

bool idl_msg::RotGripCmd_msg::operator ==(
        const RotGripCmd_msg& x)
{

    return (m_front_arm_deg == x.m_front_arm_deg && m_back_arm_deg == x.m_back_arm_deg && m_trigger_gripper == x.m_trigger_gripper);
}

bool idl_msg::RotGripCmd_msg::operator !=(
        const RotGripCmd_msg& x)
{
    return !(*this == x);
}

size_t idl_msg::RotGripCmd_msg::getMaxCdrSerializedSize(
        size_t current_alignment)
{
    size_t initial_alignment = current_alignment;


    current_alignment += 4 + eprosima::fastcdr::Cdr::alignment(current_alignment, 4);


    current_alignment += 4 + eprosima::fastcdr::Cdr::alignment(current_alignment, 4);


    current_alignment += 1 + eprosima::fastcdr::Cdr::alignment(current_alignment, 1);



    return current_alignment - initial_alignment;
}

size_t idl_msg::RotGripCmd_msg::getCdrSerializedSize(
        const idl_msg::RotGripCmd_msg& data,
        size_t current_alignment)
{
    (void)data;
    size_t initial_alignment = current_alignment;


    current_alignment += 4 + eprosima::fastcdr::Cdr::alignment(current_alignment, 4);


    current_alignment += 4 + eprosima::fastcdr::Cdr::alignment(current_alignment, 4);


    current_alignment += 1 + eprosima::fastcdr::Cdr::alignment(current_alignment, 1);



    return current_alignment - initial_alignment;
}

void idl_msg::RotGripCmd_msg::serialize(
        eprosima::fastcdr::Cdr& scdr) const
{

    scdr << m_front_arm_deg;
    scdr << m_back_arm_deg;
    scdr << m_trigger_gripper;

}

void idl_msg::RotGripCmd_msg::deserialize(
        eprosima::fastcdr::Cdr& dcdr)
{

    dcdr >> m_front_arm_deg;
    dcdr >> m_back_arm_deg;
    dcdr >> m_trigger_gripper;
}

/*!
 * @brief This function sets a value in member front_arm_deg
 * @param _front_arm_deg New value for member front_arm_deg
 */
void idl_msg::RotGripCmd_msg::front_arm_deg(
        int32_t _front_arm_deg)
{
    m_front_arm_deg = _front_arm_deg;
}

/*!
 * @brief This function returns the value of member front_arm_deg
 * @return Value of member front_arm_deg
 */
int32_t idl_msg::RotGripCmd_msg::front_arm_deg() const
{
    return m_front_arm_deg;
}

/*!
 * @brief This function returns a reference to member front_arm_deg
 * @return Reference to member front_arm_deg
 */
int32_t& idl_msg::RotGripCmd_msg::front_arm_deg()
{
    return m_front_arm_deg;
}

/*!
 * @brief This function sets a value in member back_arm_deg
 * @param _back_arm_deg New value for member back_arm_deg
 */
void idl_msg::RotGripCmd_msg::back_arm_deg(
        int32_t _back_arm_deg)
{
    m_back_arm_deg = _back_arm_deg;
}

/*!
 * @brief This function returns the value of member back_arm_deg
 * @return Value of member back_arm_deg
 */
int32_t idl_msg::RotGripCmd_msg::back_arm_deg() const
{
    return m_back_arm_deg;
}

/*!
 * @brief This function returns a reference to member back_arm_deg
 * @return Reference to member back_arm_deg
 */
int32_t& idl_msg::RotGripCmd_msg::back_arm_deg()
{
    return m_back_arm_deg;
}

/*!
 * @brief This function sets a value in member trigger_gripper
 * @param _trigger_gripper New value for member trigger_gripper
 */
void idl_msg::RotGripCmd_msg::trigger_gripper(
        bool _trigger_gripper)
{
    m_trigger_gripper = _trigger_gripper;
}

/*!
 * @brief This function returns the value of member trigger_gripper
 * @return Value of member trigger_gripper
 */
bool idl_msg::RotGripCmd_msg::trigger_gripper() const
{
    return m_trigger_gripper;
}

/*!
 * @brief This function returns a reference to member trigger_gripper
 * @return Reference to member trigger_gripper
 */
bool& idl_msg::RotGripCmd_msg::trigger_gripper()
{
    return m_trigger_gripper;
}


size_t idl_msg::RotGripCmd_msg::getKeyMaxCdrSerializedSize(
        size_t current_alignment)
{
    size_t current_align = current_alignment;






    return current_align;
}

bool idl_msg::RotGripCmd_msg::isKeyDefined()
{
    return false;
}

void idl_msg::RotGripCmd_msg::serializeKey(
        eprosima::fastcdr::Cdr& scdr) const
{
    (void) scdr;
       
}

