// Copyright 2016 Proyectos y Sistemas de Mantenimiento SL (eProsima).
//
// Licensed under the Apache License, Version 2.0 (the "License");
// you may not use this file except in compliance with the License.
// You may obtain a copy of the License at
//
//     http://www.apache.org/licenses/LICENSE-2.0
//
// Unless required by applicable law or agreed to in writing, software
// distributed under the License is distributed on an "AS IS" BASIS,
// WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
// See the License for the specific language governing permissions and
// limitations under the License.

/*!
 * @file MocapSegments_msg.cpp
 * This source file contains the definition of the described types in the IDL file.
 *
 * This file was generated by the tool gen.
 */

#ifdef _WIN32
// Remove linker warning LNK4221 on Visual Studio
namespace {
char dummy;
}  // namespace
#endif  // _WIN32

#include "MocapSegments_msg.h"
#include <fastcdr/Cdr.h>

#include <fastcdr/exceptions/BadParamException.h>
using namespace eprosima::fastcdr::exception;

#include <utility>

idl_msg::MocapSegments_msg::MocapSegments_msg()
{
    // m_object_name com.eprosima.idl.parser.typecode.StringTypeCode@5af97850
    m_object_name ="";
    // m_segment_x com.eprosima.idl.parser.typecode.ArrayTypeCode@5ef60048
    memset(&m_segment_x, 0, (10) * 4);
    // m_segment_y com.eprosima.idl.parser.typecode.ArrayTypeCode@780cb77
    memset(&m_segment_y, 0, (10) * 4);
    // m_segment_z com.eprosima.idl.parser.typecode.ArrayTypeCode@691a7f8f
    memset(&m_segment_z, 0, (10) * 4);

}

idl_msg::MocapSegments_msg::~MocapSegments_msg()
{




}

idl_msg::MocapSegments_msg::MocapSegments_msg(
        const MocapSegments_msg& x)
{
    m_object_name = x.m_object_name;
    m_segment_x = x.m_segment_x;
    m_segment_y = x.m_segment_y;
    m_segment_z = x.m_segment_z;
}

idl_msg::MocapSegments_msg::MocapSegments_msg(
        MocapSegments_msg&& x)
{
    m_object_name = std::move(x.m_object_name);
    m_segment_x = std::move(x.m_segment_x);
    m_segment_y = std::move(x.m_segment_y);
    m_segment_z = std::move(x.m_segment_z);
}

idl_msg::MocapSegments_msg& idl_msg::MocapSegments_msg::operator =(
        const MocapSegments_msg& x)
{

    m_object_name = x.m_object_name;
    m_segment_x = x.m_segment_x;
    m_segment_y = x.m_segment_y;
    m_segment_z = x.m_segment_z;

    return *this;
}

idl_msg::MocapSegments_msg& idl_msg::MocapSegments_msg::operator =(
        MocapSegments_msg&& x)
{

    m_object_name = std::move(x.m_object_name);
    m_segment_x = std::move(x.m_segment_x);
    m_segment_y = std::move(x.m_segment_y);
    m_segment_z = std::move(x.m_segment_z);

    return *this;
}

bool idl_msg::MocapSegments_msg::operator ==(
        const MocapSegments_msg& x)
{

    return (m_object_name == x.m_object_name && m_segment_x == x.m_segment_x && m_segment_y == x.m_segment_y && m_segment_z == x.m_segment_z);
}

bool idl_msg::MocapSegments_msg::operator !=(
        const MocapSegments_msg& x)
{
    return !(*this == x);
}

size_t idl_msg::MocapSegments_msg::getMaxCdrSerializedSize(
        size_t current_alignment)
{
    size_t initial_alignment = current_alignment;


    current_alignment += 4 + eprosima::fastcdr::Cdr::alignment(current_alignment, 4) + 255 + 1;

    current_alignment += ((10) * 4) + eprosima::fastcdr::Cdr::alignment(current_alignment, 4);


    current_alignment += ((10) * 4) + eprosima::fastcdr::Cdr::alignment(current_alignment, 4);


    current_alignment += ((10) * 4) + eprosima::fastcdr::Cdr::alignment(current_alignment, 4);



    return current_alignment - initial_alignment;
}

size_t idl_msg::MocapSegments_msg::getCdrSerializedSize(
        const idl_msg::MocapSegments_msg& data,
        size_t current_alignment)
{
    (void)data;
    size_t initial_alignment = current_alignment;


    current_alignment += 4 + eprosima::fastcdr::Cdr::alignment(current_alignment, 4) + data.object_name().size() + 1;

    if ((10) > 0)
    {
        current_alignment += ((10) * 4) + eprosima::fastcdr::Cdr::alignment(current_alignment, 4);
    }

    if ((10) > 0)
    {
        current_alignment += ((10) * 4) + eprosima::fastcdr::Cdr::alignment(current_alignment, 4);
    }

    if ((10) > 0)
    {
        current_alignment += ((10) * 4) + eprosima::fastcdr::Cdr::alignment(current_alignment, 4);
    }


    return current_alignment - initial_alignment;
}

void idl_msg::MocapSegments_msg::serialize(
        eprosima::fastcdr::Cdr& scdr) const
{

    scdr << m_object_name;
    scdr << m_segment_x;

    scdr << m_segment_y;

    scdr << m_segment_z;


}

void idl_msg::MocapSegments_msg::deserialize(
        eprosima::fastcdr::Cdr& dcdr)
{

    dcdr >> m_object_name;
    dcdr >> m_segment_x;

    dcdr >> m_segment_y;

    dcdr >> m_segment_z;

}

/*!
 * @brief This function copies the value in member object_name
 * @param _object_name New value to be copied in member object_name
 */
void idl_msg::MocapSegments_msg::object_name(
        const std::string& _object_name)
{
    m_object_name = _object_name;
}

/*!
 * @brief This function moves the value in member object_name
 * @param _object_name New value to be moved in member object_name
 */
void idl_msg::MocapSegments_msg::object_name(
        std::string&& _object_name)
{
    m_object_name = std::move(_object_name);
}

/*!
 * @brief This function returns a constant reference to member object_name
 * @return Constant reference to member object_name
 */
const std::string& idl_msg::MocapSegments_msg::object_name() const
{
    return m_object_name;
}

/*!
 * @brief This function returns a reference to member object_name
 * @return Reference to member object_name
 */
std::string& idl_msg::MocapSegments_msg::object_name()
{
    return m_object_name;
}
/*!
 * @brief This function copies the value in member segment_x
 * @param _segment_x New value to be copied in member segment_x
 */
void idl_msg::MocapSegments_msg::segment_x(
        const std::array<float, 10>& _segment_x)
{
    m_segment_x = _segment_x;
}

/*!
 * @brief This function moves the value in member segment_x
 * @param _segment_x New value to be moved in member segment_x
 */
void idl_msg::MocapSegments_msg::segment_x(
        std::array<float, 10>&& _segment_x)
{
    m_segment_x = std::move(_segment_x);
}

/*!
 * @brief This function returns a constant reference to member segment_x
 * @return Constant reference to member segment_x
 */
const std::array<float, 10>& idl_msg::MocapSegments_msg::segment_x() const
{
    return m_segment_x;
}

/*!
 * @brief This function returns a reference to member segment_x
 * @return Reference to member segment_x
 */
std::array<float, 10>& idl_msg::MocapSegments_msg::segment_x()
{
    return m_segment_x;
}
/*!
 * @brief This function copies the value in member segment_y
 * @param _segment_y New value to be copied in member segment_y
 */
void idl_msg::MocapSegments_msg::segment_y(
        const std::array<float, 10>& _segment_y)
{
    m_segment_y = _segment_y;
}

/*!
 * @brief This function moves the value in member segment_y
 * @param _segment_y New value to be moved in member segment_y
 */
void idl_msg::MocapSegments_msg::segment_y(
        std::array<float, 10>&& _segment_y)
{
    m_segment_y = std::move(_segment_y);
}

/*!
 * @brief This function returns a constant reference to member segment_y
 * @return Constant reference to member segment_y
 */
const std::array<float, 10>& idl_msg::MocapSegments_msg::segment_y() const
{
    return m_segment_y;
}

/*!
 * @brief This function returns a reference to member segment_y
 * @return Reference to member segment_y
 */
std::array<float, 10>& idl_msg::MocapSegments_msg::segment_y()
{
    return m_segment_y;
}
/*!
 * @brief This function copies the value in member segment_z
 * @param _segment_z New value to be copied in member segment_z
 */
void idl_msg::MocapSegments_msg::segment_z(
        const std::array<float, 10>& _segment_z)
{
    m_segment_z = _segment_z;
}

/*!
 * @brief This function moves the value in member segment_z
 * @param _segment_z New value to be moved in member segment_z
 */
void idl_msg::MocapSegments_msg::segment_z(
        std::array<float, 10>&& _segment_z)
{
    m_segment_z = std::move(_segment_z);
}

/*!
 * @brief This function returns a constant reference to member segment_z
 * @return Constant reference to member segment_z
 */
const std::array<float, 10>& idl_msg::MocapSegments_msg::segment_z() const
{
    return m_segment_z;
}

/*!
 * @brief This function returns a reference to member segment_z
 * @return Reference to member segment_z
 */
std::array<float, 10>& idl_msg::MocapSegments_msg::segment_z()
{
    return m_segment_z;
}

size_t idl_msg::MocapSegments_msg::getKeyMaxCdrSerializedSize(
        size_t current_alignment)
{
    size_t current_align = current_alignment;







    return current_align;
}

bool idl_msg::MocapSegments_msg::isKeyDefined()
{
    return false;
}

void idl_msg::MocapSegments_msg::serializeKey(
        eprosima::fastcdr::Cdr& scdr) const
{
    (void) scdr;
        
}

