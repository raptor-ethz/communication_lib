// Copyright 2016 Proyectos y Sistemas de Mantenimiento SL (eProsima).
//
// Licensed under the Apache License, Version 2.0 (the "License");
// you may not use this file except in compliance with the License.
// You may obtain a copy of the License at
//
//     http://www.apache.org/licenses/LICENSE-2.0
//
// Unless required by applicable law or agreed to in writing, software
// distributed under the License is distributed on an "AS IS" BASIS,
// WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
// See the License for the specific language governing permissions and
// limitations under the License.

/*!
 * @file MocapSegments_msg.cpp
 * This source file contains the definition of the described types in the IDL file.
 *
 * This file was generated by the tool gen.
 */

#ifdef _WIN32
// Remove linker warning LNK4221 on Visual Studio
namespace {
char dummy;
}  // namespace
#endif  // _WIN32

#include "MocapSegments_msg.h"
#include <fastcdr/Cdr.h>

#include <fastcdr/exceptions/BadParamException.h>
using namespace eprosima::fastcdr::exception;

#include <utility>

idl_msg::MocapSegments_msg::MocapSegments_msg()
{
    // m_header com.eprosima.fastdds.idl.parser.typecode.StructTypeCode@5af97850

    // m_segments com.eprosima.idl.parser.typecode.ArrayTypeCode@5ef60048


}

idl_msg::MocapSegments_msg::~MocapSegments_msg()
{


}

idl_msg::MocapSegments_msg::MocapSegments_msg(
        const MocapSegments_msg& x)
{
    m_header = x.m_header;
    m_segments = x.m_segments;
}

idl_msg::MocapSegments_msg::MocapSegments_msg(
        MocapSegments_msg&& x)
{
    m_header = std::move(x.m_header);
    m_segments = std::move(x.m_segments);
}

idl_msg::MocapSegments_msg& idl_msg::MocapSegments_msg::operator =(
        const MocapSegments_msg& x)
{

    m_header = x.m_header;
    m_segments = x.m_segments;

    return *this;
}

idl_msg::MocapSegments_msg& idl_msg::MocapSegments_msg::operator =(
        MocapSegments_msg&& x)
{

    m_header = std::move(x.m_header);
    m_segments = std::move(x.m_segments);

    return *this;
}

bool idl_msg::MocapSegments_msg::operator ==(
        const MocapSegments_msg& x)
{

    return (m_header == x.m_header && m_segments == x.m_segments);
}

bool idl_msg::MocapSegments_msg::operator !=(
        const MocapSegments_msg& x)
{
    return !(*this == x);
}

size_t idl_msg::MocapSegments_msg::getMaxCdrSerializedSize(
        size_t current_alignment)
{
    size_t initial_alignment = current_alignment;


    current_alignment += idl_msg::Header_msg::getMaxCdrSerializedSize(current_alignment);

    for(size_t a = 0; a < (10); ++a)
    {
        current_alignment += idl_msg::Vector3f_msg::getMaxCdrSerializedSize(current_alignment);}

    return current_alignment - initial_alignment;
}

size_t idl_msg::MocapSegments_msg::getCdrSerializedSize(
        const idl_msg::MocapSegments_msg& data,
        size_t current_alignment)
{
    (void)data;
    size_t initial_alignment = current_alignment;


    current_alignment += idl_msg::Header_msg::getCdrSerializedSize(data.header(), current_alignment);

    for(size_t a = 0; a < data.segments().size(); ++a)
    {
            current_alignment += idl_msg::Vector3f_msg::getCdrSerializedSize(data.segments().at(a), current_alignment);
    }

    return current_alignment - initial_alignment;
}

void idl_msg::MocapSegments_msg::serialize(
        eprosima::fastcdr::Cdr& scdr) const
{

    scdr << m_header;
    scdr << m_segments;


}

void idl_msg::MocapSegments_msg::deserialize(
        eprosima::fastcdr::Cdr& dcdr)
{

    dcdr >> m_header;
    dcdr >> m_segments;

}

/*!
 * @brief This function copies the value in member header
 * @param _header New value to be copied in member header
 */
void idl_msg::MocapSegments_msg::header(
        const idl_msg::Header_msg& _header)
{
    m_header = _header;
}

/*!
 * @brief This function moves the value in member header
 * @param _header New value to be moved in member header
 */
void idl_msg::MocapSegments_msg::header(
        idl_msg::Header_msg&& _header)
{
    m_header = std::move(_header);
}

/*!
 * @brief This function returns a constant reference to member header
 * @return Constant reference to member header
 */
const idl_msg::Header_msg& idl_msg::MocapSegments_msg::header() const
{
    return m_header;
}

/*!
 * @brief This function returns a reference to member header
 * @return Reference to member header
 */
idl_msg::Header_msg& idl_msg::MocapSegments_msg::header()
{
    return m_header;
}
/*!
 * @brief This function copies the value in member segments
 * @param _segments New value to be copied in member segments
 */
void idl_msg::MocapSegments_msg::segments(
        const std::array<idl_msg::Vector3f_msg, 10>& _segments)
{
    m_segments = _segments;
}

/*!
 * @brief This function moves the value in member segments
 * @param _segments New value to be moved in member segments
 */
void idl_msg::MocapSegments_msg::segments(
        std::array<idl_msg::Vector3f_msg, 10>&& _segments)
{
    m_segments = std::move(_segments);
}

/*!
 * @brief This function returns a constant reference to member segments
 * @return Constant reference to member segments
 */
const std::array<idl_msg::Vector3f_msg, 10>& idl_msg::MocapSegments_msg::segments() const
{
    return m_segments;
}

/*!
 * @brief This function returns a reference to member segments
 * @return Reference to member segments
 */
std::array<idl_msg::Vector3f_msg, 10>& idl_msg::MocapSegments_msg::segments()
{
    return m_segments;
}

size_t idl_msg::MocapSegments_msg::getKeyMaxCdrSerializedSize(
        size_t current_alignment)
{
    size_t current_align = current_alignment;





    return current_align;
}

bool idl_msg::MocapSegments_msg::isKeyDefined()
{
    return false;
}

void idl_msg::MocapSegments_msg::serializeKey(
        eprosima::fastcdr::Cdr& scdr) const
{
    (void) scdr;
      
}

